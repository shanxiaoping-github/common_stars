package com.platform.advertising;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.platform.advertising.Occupation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table OCCUPATION.
*/
public class OccupationDao extends AbstractDao<Occupation, Long> {

    public static final String TABLENAME = "OCCUPATION";

    /**
     * Properties of entity Occupation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdStr = new Property(1, String.class, "idStr", false, "ID_STR");
        public final static Property CreateTime = new Property(2, String.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(3, String.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Sort = new Property(4, String.class, "sort", false, "SORT");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Value = new Property(6, String.class, "value", false, "VALUE");
        public final static Property Jp = new Property(7, String.class, "jp", false, "JP");
        public final static Property Qp = new Property(8, String.class, "qp", false, "QP");
        public final static Property Remark = new Property(9, String.class, "remark", false, "REMARK");
    };


    public OccupationDao(DaoConfig config) {
        super(config);
    }
    
    public OccupationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'OCCUPATION' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ID_STR' TEXT," + // 1: idStr
                "'CREATE_TIME' TEXT," + // 2: createTime
                "'UPDATE_TIME' TEXT," + // 3: updateTime
                "'SORT' TEXT," + // 4: sort
                "'NAME' TEXT," + // 5: name
                "'VALUE' TEXT," + // 6: value
                "'JP' TEXT," + // 7: jp
                "'QP' TEXT," + // 8: qp
                "'REMARK' TEXT);"); // 9: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'OCCUPATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Occupation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String idStr = entity.getIdStr();
        if (idStr != null) {
            stmt.bindString(2, idStr);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(3, createTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(4, updateTime);
        }
 
        String sort = entity.getSort();
        if (sort != null) {
            stmt.bindString(5, sort);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(7, value);
        }
 
        String jp = entity.getJp();
        if (jp != null) {
            stmt.bindString(8, jp);
        }
 
        String qp = entity.getQp();
        if (qp != null) {
            stmt.bindString(9, qp);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(10, remark);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Occupation readEntity(Cursor cursor, int offset) {
        Occupation entity = new Occupation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // idStr
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // createTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // updateTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sort
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // value
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // jp
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // qp
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // remark
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Occupation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdStr(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUpdateTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSort(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setValue(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setJp(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setQp(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRemark(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Occupation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Occupation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
