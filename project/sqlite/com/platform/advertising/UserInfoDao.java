package com.platform.advertising;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.platform.advertising.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_INFO.
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property Sex = new Property(2, String.class, "sex", false, "SEX");
        public final static Property AgeId = new Property(3, String.class, "ageId", false, "AGE_ID");
        public final static Property AgeName = new Property(4, String.class, "ageName", false, "AGE_NAME");
        public final static Property JobId = new Property(5, String.class, "jobId", false, "JOB_ID");
        public final static Property JobName = new Property(6, String.class, "jobName", false, "JOB_NAME");
        public final static Property ProvinceId = new Property(7, String.class, "provinceId", false, "PROVINCE_ID");
        public final static Property ProvinceName = new Property(8, String.class, "provinceName", false, "PROVINCE_NAME");
        public final static Property CityId = new Property(9, String.class, "cityId", false, "CITY_ID");
        public final static Property CityName = new Property(10, String.class, "cityName", false, "CITY_NAME");
        public final static Property AreaId = new Property(11, String.class, "areaId", false, "AREA_ID");
        public final static Property AreaName = new Property(12, String.class, "areaName", false, "AREA_NAME");
        public final static Property IsNetShoping = new Property(13, String.class, "isNetShoping", false, "IS_NET_SHOPING");
        public final static Property IsMarry = new Property(14, String.class, "isMarry", false, "IS_MARRY");
    };


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'USER_ID' TEXT," + // 1: userId
                "'SEX' TEXT," + // 2: sex
                "'AGE_ID' TEXT," + // 3: ageId
                "'AGE_NAME' TEXT," + // 4: ageName
                "'JOB_ID' TEXT," + // 5: jobId
                "'JOB_NAME' TEXT," + // 6: jobName
                "'PROVINCE_ID' TEXT," + // 7: provinceId
                "'PROVINCE_NAME' TEXT," + // 8: provinceName
                "'CITY_ID' TEXT," + // 9: cityId
                "'CITY_NAME' TEXT," + // 10: cityName
                "'AREA_ID' TEXT," + // 11: areaId
                "'AREA_NAME' TEXT," + // 12: areaName
                "'IS_NET_SHOPING' TEXT," + // 13: isNetShoping
                "'IS_MARRY' TEXT);"); // 14: isMarry
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(3, sex);
        }
 
        String ageId = entity.getAgeId();
        if (ageId != null) {
            stmt.bindString(4, ageId);
        }
 
        String ageName = entity.getAgeName();
        if (ageName != null) {
            stmt.bindString(5, ageName);
        }
 
        String jobId = entity.getJobId();
        if (jobId != null) {
            stmt.bindString(6, jobId);
        }
 
        String jobName = entity.getJobName();
        if (jobName != null) {
            stmt.bindString(7, jobName);
        }
 
        String provinceId = entity.getProvinceId();
        if (provinceId != null) {
            stmt.bindString(8, provinceId);
        }
 
        String provinceName = entity.getProvinceName();
        if (provinceName != null) {
            stmt.bindString(9, provinceName);
        }
 
        String cityId = entity.getCityId();
        if (cityId != null) {
            stmt.bindString(10, cityId);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(11, cityName);
        }
 
        String areaId = entity.getAreaId();
        if (areaId != null) {
            stmt.bindString(12, areaId);
        }
 
        String areaName = entity.getAreaName();
        if (areaName != null) {
            stmt.bindString(13, areaName);
        }
 
        String isNetShoping = entity.getIsNetShoping();
        if (isNetShoping != null) {
            stmt.bindString(14, isNetShoping);
        }
 
        String isMarry = entity.getIsMarry();
        if (isMarry != null) {
            stmt.bindString(15, isMarry);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sex
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ageId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ageName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // jobId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // jobName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // provinceId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // provinceName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // cityId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // cityName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // areaId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // areaName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // isNetShoping
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // isMarry
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSex(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAgeId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAgeName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setJobId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setJobName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setProvinceId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProvinceName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCityId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCityName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAreaId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAreaName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsNetShoping(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIsMarry(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
